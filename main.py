from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
import os
import sys
import logging


load_dotenv()  # take environment variables

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPECIAL_CHAT_ID = os.getenv("SPECIAL_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# ===== –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π =====
class OrderStates(StatesGroup):
    SELECTING_CATEGORY = State()
    ART_ORDER = State()
    PROGRAM_ORDER = State()
    FILLING_ART_FORM = State()
    FILLING_PROGRAM_FORM = State()

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å",
        callback_data="start_order"
    ))
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º.",
        reply_markup=builder.as_markup()
    )

# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "start_order")
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé® –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç", callback_data="order_art"),
        types.InlineKeyboardButton(text="üíª –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="order_program")
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(OrderStates.SELECTING_CATEGORY)

# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(OrderStates.SELECTING_CATEGORY, F.data.in_(["order_art", "order_program"]))
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "order_art":
        # –î–ª—è –∞—Ä—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
            callback_data="fill_art_form"
        ))
        await callback.message.edit_text(
            "üé® –£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ –∞—Ä—Ç–∞:\n"
            "‚Ä¢ –°—Ä–æ–∫ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: 3-7 –¥–Ω–µ–π\n"
            "‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ 50%\n"
            "‚Ä¢ –ü—Ä–∞–≤–∫–∏ –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–µ—Ç—á–∞",
            reply_markup=builder.as_markup()
        )
        await state.set_state(OrderStates.ART_ORDER)
    
    if callback.data == "order_program":
        # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É",
            callback_data="fill_program_form"
        ))
        await callback.message.edit_text(
            "üíª –£—Å–ª–æ–≤–∏—è –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã:\n"
            "‚Ä¢ –°—Ä–æ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –æ—Ç 2 –Ω–µ–¥–µ–ª—å\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ\n"
            "‚Ä¢ –Ω—É–∂–µ–Ω –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å",
            reply_markup=builder.as_markup()
        )
        await state.set_state(OrderStates.PROGRAM_ORDER)

# ===== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç =====

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞—Ä—Ç–∞
@dp.callback_query(OrderStates.ART_ORDER, F.data == "fill_art_form")
async def start_art_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–ü—Ä–∏–º–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã:\n\n"
        "1. –¢–∏–ø –∞—Ä—Ç–∞\n"
        "2. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏\n"
        "3. –ü–æ–∑—ã\n"
        "4. –ò–¥–µ—è –∞—Ä—Ç—ã\n"
        "5. –î–µ–¥–ª–∞–π–Ω\n"
        "6. –í–ê–®–ò –ö–û–ù–¢–ê–ö–¢–´\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º:"
    )
    await state.set_state(OrderStates.FILLING_ART_FORM)

# –ü—Ä–∏–µ–º –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞—Ä—Ç–∞
@dp.message(OrderStates.FILLING_ART_FORM)
async def process_art_form(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–ø–µ—Ü—á–∞—Ç
    await bot.send_message(
        chat_id=SPECIAL_CHAT_ID,
        text=f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä—Ç!\n\n"
             f"–û—Ç: @{message.from_user.username}\n"
             f"–î–∞–Ω–Ω—ã–µ:\n{message.text}"
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await state.clear()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–ø–æ—à–∞–≥–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
@dp.callback_query(OrderStates.PROGRAM_ORDER, F.data == "fill_program_form")
async def start_program_form(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(OrderStates.FILLING_PROGRAM_FORM)
    await state.update_data(steps=[])  # –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    await callback.message.answer(
        "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ—à–∞–≥–æ–≤—É—é –∞–Ω–∫–µ—Ç—É:\n\n"
        "–®–∞–≥ 1/5: –û–ø–∏—à–∏—Ç–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
    )

# –ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message(OrderStates.FILLING_PROGRAM_FORM)
async def process_program_form_step(message: types.Message, state: FSMContext):
    data = await state.get_data()
    steps = data.get("steps", [])
    steps.append(message.text)
    
    if len(steps) == 1:
        await message.answer("–®–∞–≥ 2/5: –¢—Ä–µ–±—É–µ–º—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
        await state.update_data(steps=steps)
        
    elif len(steps) == 2:
        await message.answer("–®–∞–≥ 3/5: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è")
        await state.update_data(steps=steps)
        
    elif len(steps) == 3:
        await message.answer("–®–∞–≥ 4/5: –°—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç")
        await state.update_data(steps=steps)
    
    elif len(steps) == 4:
        await message.answer("–®–∞–≥ 5/5: –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è")
        await state.update_data(steps=steps)
        
    else:
        # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∫–µ—Ç—ã
        form_text = "\n\n".join([
            f"1. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: {steps[0]}",
            f"2. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª: {steps[1]}",
            f"3. –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {steps[2]}",
            f"4. –ë—é–¥–∂–µ—Ç/–°—Ä–æ–∫–∏: {steps[3]}",
            f"5. –∫–æ–Ω—Ç–∞–∫—Ç—ã: {steps[3]}"
        ])
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–ø–µ—Ü—á–∞—Ç
        await bot.send_message(
            chat_id=SPECIAL_CHAT_ID,
            text=f"üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É!\n\n"
                 f"–û—Ç: @{message.from_user.username}\n"
                 f"–î–∞–Ω–Ω—ã–µ:\n{form_text}"
        )
        await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
        await state.clear()

# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())