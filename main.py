import logging
import os
import sys

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv

load_dotenv()  # take environment variables

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
SPECIAL_CHAT_ID = os.getenv("SPECIAL_CHAT_ID")  # ID —á–∞—Ç–∞ –¥–ª—è –∑–∞—è–≤–æ–∫

print(f"token:{BOT_TOKEN}\nID:{SPECIAL_CHAT_ID}")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()


# ===== –ö–ª–∞—Å—Å—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π =====
class OrderStates(StatesGroup):
    SELECTING_CATEGORY = State()
    ART_ORDER = State()
    PROGRAM_ORDER = State()
    FILLING_ART_FORM = State()
    FILLING_PROGRAM_FORM = State()


# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ =====


# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üõçÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="start_order")
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å –∑–∞–∫–∞–∑–æ–º.", reply_markup=builder.as_markup()
    )


# –ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "start_order")
async def start_order(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(
        types.InlineKeyboardButton(text="üé® –ó–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç", callback_data="order_art"),
        types.InlineKeyboardButton(
            text="üíª –ó–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É", callback_data="order_program"
        ),
    )
    builder.adjust(1)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏:", reply_markup=builder.as_markup()
    )
    await state.set_state(OrderStates.SELECTING_CATEGORY)


# –í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(
    OrderStates.SELECTING_CATEGORY, F.data.in_(["order_art", "order_program"])
)
async def select_category(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()

    if callback.data == "order_art":
        # –î–ª—è –∞—Ä—Ç–∞
        builder.add(
            types.InlineKeyboardButton(
                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_art_form"
            )
        )
        await callback.message.edit_text(
            "üé® –•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –∞—Ä—Ç? –í–æ—Ç –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n\n"
            "‚Ä¢ ‚è≥ –°—Ä–æ–∫–∏: –æ–±—ã—á–Ω–æ –æ—Ç 3 –¥–æ 14 –¥–Ω–µ–π (–≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)\n"
            "‚Ä¢ üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 50%, –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –ø–æ—Å–ª–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ ‚úèÔ∏è –ü—Ä–∞–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ —Å–∫–µ—Ç—á–∞\n\n"
            "üìå –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã:\n"
            "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç: 1500 ‚ÇΩ\n"
            "‚Ä¢ –î–æ –ø–æ—è—Å–∞: 2000 ‚ÇΩ\n"
            "‚Ä¢ –í –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç: 2500‚Äì3500 ‚ÇΩ\n"
            "‚Ä¢ –°–∫–µ—Ç—á: –æ—Ç 300 ‚ÇΩ\n"
            "‚Ä¢ –õ–∞–π–Ω: –æ—Ç 700 ‚ÇΩ\n"
            "‚Ä¢ + –í—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂: +50%\n"
            "‚Ä¢ + –§–æ–Ω: +300‚Äì1000 ‚ÇΩ (–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏)\n\n"
            "–ï—Å–ª–∏ –≤—Å—ë –æ–∫–µ–π ‚Äî –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –∑–∞–ø–æ–ª–Ω—è–π –∞–Ω–∫–µ—Ç—É üìù",
            reply_markup=builder.as_markup(),
        )

        await state.set_state(OrderStates.ART_ORDER)

    else:
        # –î–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ–¥–Ω–æ—ç—Ç–∞–ø–Ω–∞—è –∞–Ω–∫–µ—Ç–∞)
        builder.add(
            types.InlineKeyboardButton(
                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É", callback_data="fill_program_form"
            )
        )
        await callback.message.edit_text(
            "üíª –•–æ—á–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É? –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–∞–ª–µ–π:\n\n"
            "‚Ä¢ ‚è≥ –°—Ä–æ–∫–∏: –æ–±—ã—á–Ω–æ –æ—Ç 2 –Ω–µ–¥–µ–ª—å ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ üìÑ –ù—É–∂–Ω–æ –Ω–µ–±–æ–ª—å—à–æ–µ –¢–ó –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ\n"
            "‚Ä¢ üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞ ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏, –≤—Å—ë –æ–±—Å—É–¥–∏–º\n\n"
            "–ï—Å–ª–∏ –≤—Å—ë –ø–æ–Ω—è—Ç–Ω–æ, –∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –∑–∞–ø–æ–ª–Ω–∏ –∞–Ω–∫–µ—Ç—É üìù",
            reply_markup=builder.as_markup(),
        )
        await state.set_state(OrderStates.PROGRAM_ORDER)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞—Ä—Ç–∞
@dp.callback_query(OrderStates.ART_ORDER, F.data == "fill_art_form")
async def start_art_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìù –ü—Ä–∏–º–µ—Ä –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∞—Ä—Ç‚Äë–∑–∞–∫–∞–∑–∞:\n\n"
        "1. –¢–∏–ø —Ä–∞–±–æ—Ç—ã (–ø–æ–ª–Ω–æ—Ü–µ–Ω–∫–∞, –¥–æ –±–µ–¥–µ—Ä, –ø–æ—Ä—Ç—Ä–µ—Ç)\n"
        "2. –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ (—á–µ–ª–æ–≤–µ–∫/–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ–º)\n"
        "3. –ü–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –ø–æ–∑–∞–º (—Å–∏–¥–∏—Ç, —Å—Ç–æ–∏—Ç, –≤ –¥–≤–∏–∂–µ–Ω–∏–∏)\n"
        "4. –ë—é–¥–∂–µ—Ç (–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Ü–µ–Ω–∫–∏ –Ω–∏–∂–µ)\n"
        "5. –î–µ–¥–ª–∞–π–Ω (—Ç–æ—á–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω: 25 –∏—é–ª—è, –∏–ª–∏ ¬´–¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞¬ª)\n"
        "6. –í–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, email, Telegram)\n\n"
        "üí∞ –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ü–µ–Ω—ã:\n"
        "‚Ä¢ –ü–æ—Ä—Ç—Ä–µ—Ç: 1500 ‚ÇΩ\n"
        "‚Ä¢ –î–æ –ø–æ—è—Å–∞: 2000 ‚ÇΩ\n"
        "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç: 2500‚Äì3500 ‚ÇΩ\n"
        "‚Ä¢ –°–∫–µ—Ç—á: –æ—Ç 300 ‚ÇΩ, –õ–∞–π–Ω: –æ—Ç 700 ‚ÇΩ\n"
        "‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂ +50%, —Ñ–æ–Ω +300‚Äì1000 ‚ÇΩ\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."
    )

    await state.set_state(OrderStates.FILLING_ART_FORM)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@dp.callback_query(OrderStates.PROGRAM_ORDER, F.data == "fill_program_form")
async def start_program_form(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "üìù –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:\n\n"
        "1. –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (—Ü–µ–ª—å, –±–∏–∑–Ω–µ—Å‚Äë–∑–∞–¥–∞—á–∞)\n"
        "2. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª (—Å–ø–∏—Å–æ–∫ —Ñ–∏—á)\n"
        "3. –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏/–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è)\n"
        "4. –°—Ä–æ–∫–∏ –∏ –±—é–¥–∂–µ—Ç\n"
        "5. –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω, email, Telegram)\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å—ë –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
    )
    await state.set_state(OrderStates.FILLING_PROGRAM_FORM)


@dp.message(OrderStates.FILLING_ART_FORM)
async def process_art_form(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–ø–µ—Ü—á–∞—Ç
    await bot.send_message(
        chat_id=SPECIAL_CHAT_ID,
        text=f"üö® –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∞—Ä—Ç!\n\n"
        f"–û—Ç: @{message.from_user.username}\n"
        f"–î–∞–Ω–Ω—ã–µ:\n{message.text}",
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await state.clear()

# –ü—Ä–∏–µ–º –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
@dp.message(OrderStates.FILLING_PROGRAM_FORM)
async def process_program_form(message: types.Message, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Å–ø–µ—Ü—á–∞—Ç
    await bot.send_message(
        chat_id=SPECIAL_CHAT_ID,
        text=(
            "üöÄ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–≥—Ä–∞–º–º—ã!\n\n"
            f"–û—Ç: @{message.from_user.username}\n\n"
            "–î–∞–Ω–Ω—ã–µ:\n"
            f"{message.text}"
        ),
    )
    await message.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await state.clear()


# ===== –ó–∞–ø—É—Å–∫ =====
async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    import asyncio

    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
